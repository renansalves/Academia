package br.tec.db.Pessoa.Servico;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import java.net.URI;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import br.tec.db.Pessoa.dto.PessoaDto;
import br.tec.db.Pessoa.modelo.Endereco;
import br.tec.db.Pessoa.modelo.Pessoa;
import br.tec.db.Pessoa.map.EnderecoMapperInterface;
import br.tec.db.Pessoa.map.PessoaMapperInterface;
import br.tec.db.Pessoa.repositorio.RepositorioPessoa;
import jakarta.persistence.EntityNotFoundException;

/**
 * ServicoPessoa
 */
@Service
public class ServicoPessoa {

  @Autowired
  private EnderecoMapperInterface enderecoMapper;

  @Autowired
  private PessoaMapperInterface pessoaMapper;

  @Autowired
  RepositorioPessoa repositorioPessoa;

  public ResponseEntity<PessoaDto> salvarPessoa(PessoaDto pessoa) {
    Pessoa pessoaEntidade = pessoaMapper.toEntity(pessoa);
    repositorioPessoa.save(pessoaEntidade);

    URI recurso = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(pessoaEntidade.getId())
        .toUri();
    PessoaDto pessoaDto = pessoaMapper.toDto(pessoaEntidade);

    return ResponseEntity.created(recurso).body(pessoaDto);
  }

  public ResponseEntity<PessoaDto> listarUmaPessoaPorId(Long id) {
    Optional<Pessoa> pessoa = repositorioPessoa.findById(id);
    if (pessoa.isPresent()) {

      PessoaDto pessoaDto = pessoaMapper.toDto(pessoa.get());
      return ResponseEntity.ok(pessoaDto);
    }
    return ResponseEntity.notFound().build();

  }

  public ResponseEntity<List<PessoaDto>> listarPessoas() {
    List<Pessoa> pessoas = repositorioPessoa.findAll();
    if (pessoas != null) {
      List<PessoaDto> dtos = pessoas.stream()
          .map(pessoaMapper::toDto)
          .collect(Collectors.toList());
      return ResponseEntity.ok(dtos);
    }
    return ResponseEntity.notFound().build();

  }

  public ResponseEntity<PessoaDto> atualizarPessoa(Long id, PessoaDto pessoa) {
    Optional<Pessoa> pessoaBase = repositorioPessoa.findById(id);
    if (pessoaBase.isPresent()) {
      Pessoa entidadePessoa = pessoaBase.get();
      List<Endereco> endereco = pessoa.enderecos().stream().map(enderecoMapper::toEntity).collect(Collectors.toList());

      if (pessoa.nome() != null)
        entidadePessoa.setNome(pessoa.nome());
      if (pessoa.cpf() != null)
        entidadePessoa.setCpf(pessoa.cpf());
      if (pessoa.dataNascimento() != null)
        entidadePessoa.setDataNascimento(pessoa.dataNascimento());
      entidadePessoa.setEnderecos(endereco);

      repositorioPessoa.save(entidadePessoa);
      URI recurso = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
          .buildAndExpand(entidadePessoa.getId())
          .toUri();
      return ResponseEntity.created(recurso).body(pessoaMapper.toDto(entidadePessoa));
    }

    return ResponseEntity.notFound().build();
  }

  public ResponseEntity<Void> deletarPessoa(Long id) {
    Pessoa pessoa = repositorioPessoa.findById(id)
        .orElseThrow(() -> new EntityNotFoundException("Pessoa n√£o encontrada com id: " + id));
    repositorioPessoa.delete(pessoa);
    return ResponseEntity.ofNullable(Void);
  }
}
